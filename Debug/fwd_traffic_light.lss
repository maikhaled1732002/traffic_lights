
fwd_traffic_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000de4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  00000e58  2**0
                  ALLOC
  2 .stab         000017f4  00000000  00000000  00000e58  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008fa  00000000  00000000  0000264c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e5 06 	call	0xdca	; 0xdca <main>
  74:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <normal_mode>:


 volatile u8 flage=0;


void normal_mode(void){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62

	 //green led
	set_led_value (PIN0, MDIO_PORTA, BIN_HIGH);
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	set_led_value (PIN2, MDIO_PORTB, BIN_HIGH);
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	delay_by_ovf( 5);
  98:	85 e0       	ldi	r24, 0x05	; 5
  9a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
	set_led_value (PIN0, MDIO_PORTA, BIN_LOW);
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>

	// yellow led
	       set_led_value  (PIN1, MDIO_PORTA, BIN_HIGH);
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	41 e0       	ldi	r20, 0x01	; 1
  ae:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		   set_led_value  (PIN1, MDIO_PORTB, BIN_HIGH);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			delay_by_ovf( 1);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
			set_led_value (PIN1, MDIO_PORTA, BIN_LOW);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			set_led_value (PIN1, MDIO_PORTB, BIN_LOW);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			delay_by_ovf( 1);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
			set_led_value  (PIN1, MDIO_PORTA, BIN_HIGH);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	41 e0       	ldi	r20, 0x01	; 1
  e2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			set_led_value  (PIN1, MDIO_PORTB, BIN_HIGH);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			delay_by_ovf( 1);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
			set_led_value  (PIN1, MDIO_PORTA, BIN_LOW);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			set_led_value  (PIN1, MDIO_PORTB, BIN_LOW);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			delay_by_ovf( 1);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
			set_led_value  (PIN1, MDIO_PORTA, BIN_HIGH);
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			set_led_value  (PIN1, MDIO_PORTB, BIN_HIGH);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			delay_by_ovf( 1);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
			set_led_value  (PIN1, MDIO_PORTA, BIN_LOW);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			set_led_value  (PIN1, MDIO_PORTB, BIN_LOW);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			delay_by_ovf( 0.5);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
			// cars' Red LED and pedestrian Green LEDs are on for five seconds
			set_led_value  (PIN0, MDIO_PORTB, BIN_HIGH);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			set_led_value  (PIN2, MDIO_PORTA, BIN_HIGH);
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			set_led_value (PIN2, MDIO_PORTB, BIN_LOW);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			delay_by_ovf( 5);
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>

	//red led

	set_led_value (PIN2, MDIO_PORTA, BIN_HIGH);
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	set_led_value (PIN0, MDIO_PORTB, BIN_HIGH);
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	delay_by_ovf( 5);
 17c:	85 e0       	ldi	r24, 0x05	; 5
 17e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
	set_led_value (PIN2, MDIO_PORTA, BIN_LOW);
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	set_led_value (PIN0, MDIO_PORTB, BIN_LOW);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	// yellow led

	   set_led_value  (PIN1, MDIO_PORTA, BIN_HIGH);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	41 e0       	ldi	r20, 0x01	; 1
 19c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value  (PIN1, MDIO_PORTB, BIN_HIGH);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			delay_by_ovf( 1);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
			set_led_value (PIN1, MDIO_PORTA, BIN_LOW);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			set_led_value (PIN1, MDIO_PORTB, BIN_LOW);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			delay_by_ovf( 1);
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
			set_led_value  (PIN1, MDIO_PORTA, BIN_HIGH);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			set_led_value  (PIN1, MDIO_PORTB, BIN_HIGH);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			delay_by_ovf( 1);
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
			set_led_value  (PIN1, MDIO_PORTA, BIN_LOW);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			set_led_value  (PIN1, MDIO_PORTB, BIN_LOW);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			delay_by_ovf( 1);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
			set_led_value  (PIN1, MDIO_PORTA, BIN_HIGH);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			set_led_value  (PIN1, MDIO_PORTB, BIN_HIGH);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	41 e0       	ldi	r20, 0x01	; 1
 20e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			delay_by_ovf( 0.5);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
			set_led_value  (PIN1, MDIO_PORTA, BIN_LOW);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			set_led_value  (PIN1, MDIO_PORTB, BIN_LOW);
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
			delay_by_ovf( 0.5);
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>

}
 232:	cf 91       	pop	r28
 234:	df 91       	pop	r29
 236:	08 95       	ret

00000238 <pedestrian_mode>:

  void pedestrian_mode(void){
 238:	df 93       	push	r29
 23a:	cf 93       	push	r28
 23c:	00 d0       	rcall	.+0      	; 0x23e <pedestrian_mode+0x6>
 23e:	0f 92       	push	r0
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
	flage=1;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 60 00 	sts	0x0060, r24
	u8 car_red_reading;
	u8 car_green_reading;
	u8 car_yellow_reading;
	get_led_value  (PIN2, MDIO_PORTA,&car_red_reading );
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	9e 01       	movw	r18, r28
 250:	2f 5f       	subi	r18, 0xFF	; 255
 252:	3f 4f       	sbci	r19, 0xFF	; 255
 254:	a9 01       	movw	r20, r18
 256:	0e 94 a2 06 	call	0xd44	; 0xd44 <get_led_value>
	//delay_by_ovf( 5);

	get_led_value   (PIN0, MDIO_PORTA,&car_green_reading );
 25a:	9e 01       	movw	r18, r28
 25c:	2e 5f       	subi	r18, 0xFE	; 254
 25e:	3f 4f       	sbci	r19, 0xFF	; 255
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	a9 01       	movw	r20, r18
 266:	0e 94 a2 06 	call	0xd44	; 0xd44 <get_led_value>

	get_led_value  (PIN1, MDIO_PORTA,&car_yellow_reading );
 26a:	9e 01       	movw	r18, r28
 26c:	2d 5f       	subi	r18, 0xFD	; 253
 26e:	3f 4f       	sbci	r19, 0xFF	; 255
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	a9 01       	movw	r20, r18
 276:	0e 94 a2 06 	call	0xd44	; 0xd44 <get_led_value>
	//delay_by_ovf( 5);
	 if(car_red_reading==1 )//check if car red led is onn
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	71 f4       	brne	.+28     	; 0x29c <pedestrian_mode+0x64>
	 {

	 	set_led_value  (PIN2, MDIO_PORTA, BIN_HIGH);//car red is on
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	 	set_led_value  (PIN0, MDIO_PORTB, BIN_HIGH);//pedestrian green is on
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	 	delay_by_ovf( 5);
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
 29a:	74 c0       	rjmp	.+232    	; 0x384 <pedestrian_mode+0x14c>
	 }




	 else if (car_green_reading==1||car_yellow_reading==1||car_yellow_reading==0)//check if  car green led is onn or so yellow is blink
 29c:	8a 81       	ldd	r24, Y+2	; 0x02
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	39 f0       	breq	.+14     	; 0x2b0 <pedestrian_mode+0x78>
 2a2:	8b 81       	ldd	r24, Y+3	; 0x03
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	21 f0       	breq	.+8      	; 0x2b0 <pedestrian_mode+0x78>
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
 2aa:	88 23       	and	r24, r24
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <pedestrian_mode+0x78>
 2ae:	6a c0       	rjmp	.+212    	; 0x384 <pedestrian_mode+0x14c>
	{
	 set_led_value (PIN0, MDIO_PORTA, BIN_LOW);
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	set_led_value (PIN2, MDIO_PORTB, BIN_HIGH);//pedestrian red is on
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>

	set_led_value  (PIN2, MDIO_PORTB, BIN_LOW);
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	//set_led_value (PIN0, MDIO_PORTA, BIN_LOW);
	//delay_by_ovf( 5);
	// yellow leds blinks
	set_led_value  (PIN1, MDIO_PORTA, BIN_HIGH);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	set_led_value  (PIN1, MDIO_PORTB, BIN_HIGH);
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		delay_by_ovf( 1);
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
		set_led_value (PIN1, MDIO_PORTA, BIN_LOW);
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value (PIN1, MDIO_PORTB, BIN_LOW);
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		delay_by_ovf( 1);
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
		set_led_value  (PIN1, MDIO_PORTA, BIN_HIGH);
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value  (PIN1, MDIO_PORTB, BIN_HIGH);
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		delay_by_ovf( 1);
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
		set_led_value  (PIN1, MDIO_PORTA, BIN_LOW);
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value  (PIN1, MDIO_PORTB, BIN_LOW);
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		delay_by_ovf( 1);
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
		set_led_value  (PIN1, MDIO_PORTA, BIN_HIGH);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value  (PIN1, MDIO_PORTB, BIN_HIGH);
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		delay_by_ovf( 1);
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
		set_led_value  (PIN1, MDIO_PORTA, BIN_LOW);
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value  (PIN1, MDIO_PORTB, BIN_LOW);
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		delay_by_ovf( 0.5);
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
		// cars' Red LED and pedestrian Green LEDs are on for five seconds
		set_led_value  (PIN0, MDIO_PORTB, BIN_HIGH);
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value  (PIN2, MDIO_PORTA, BIN_HIGH);
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		delay_by_ovf( 5);
 37e:	85 e0       	ldi	r24, 0x05	; 5
 380:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
	//delay_by_ovf( 5);

}

// cars' Red LED will be off and both Yellow LEDs start blinking for 5 seconds and the pedestrian's Green LED is still on.
mdio_setbinvalue (PIN2, MDIO_PORTA, BIN_LOW);
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	0e 94 1a 03 	call	0x634	; 0x634 <mdio_setbinvalue>
// yellow leds blinks
        set_led_value  (PIN1, MDIO_PORTA, BIN_HIGH);
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value  (PIN1, MDIO_PORTB, BIN_HIGH);
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		delay_by_ovf( 1);
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
		set_led_value  (PIN1, MDIO_PORTA, BIN_LOW);
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value  (PIN1, MDIO_PORTB, BIN_LOW);
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		delay_by_ovf( 1);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
		set_led_value  (PIN1, MDIO_PORTA, BIN_HIGH);
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value  (PIN1, MDIO_PORTB, BIN_HIGH);
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	41 e0       	ldi	r20, 0x01	; 1
 3d2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		delay_by_ovf( 1);
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
		set_led_value  (PIN1, MDIO_PORTA, BIN_LOW);
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value (PIN1, MDIO_PORTB, BIN_LOW);
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	40 e0       	ldi	r20, 0x00	; 0
 3ec:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		delay_by_ovf( 1);
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
		set_led_value  (PIN1, MDIO_PORTA, BIN_HIGH);
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value  (PIN1, MDIO_PORTB, BIN_HIGH);
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		delay_by_ovf( 0.5);
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
		set_led_value  (PIN1, MDIO_PORTA, BIN_LOW);
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value  (PIN1, MDIO_PORTB, BIN_LOW);
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		delay_by_ovf( 0.5);
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>
//After the five seconds the pedestrian Green LED will be off and both the pedestrian Red LED and the cars' Green LED will be on
		set_led_value (PIN0, MDIO_PORTB, BIN_LOW);
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>

		set_led_value  (PIN0, MDIO_PORTA, BIN_HIGH);
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value  (PIN2, MDIO_PORTB, BIN_HIGH);
 43e:	82 e0       	ldi	r24, 0x02	; 2
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		delay_by_ovf( 5);
 448:	85 e0       	ldi	r24, 0x05	; 5
 44a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <delay_by_ovf>

		set_led_value  (PIN0, MDIO_PORTA, BIN_LOW);
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	40 e0       	ldi	r20, 0x00	; 0
 454:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		set_led_value  (PIN2, MDIO_PORTB, BIN_LOW);
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	61 e0       	ldi	r22, 0x01	; 1
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
		normal_mode();
 462:	0e 94 3e 00 	call	0x7c	; 0x7c <normal_mode>
}
 466:	0f 90       	pop	r0
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	cf 91       	pop	r28
 46e:	df 91       	pop	r29
 470:	08 95       	ret

00000472 <app_init>:

void app_init(void){
 472:	df 93       	push	r29
 474:	cf 93       	push	r28
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
	MGIE_enable(); //enable global interrupt
 47a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <MGIE_enable>
	MEXTI0_init();  //initalize external interrupt
 47e:	0e 94 4b 06 	call	0xc96	; 0xc96 <MEXTI0_init>
	timer_init( );  //initalize timer
 482:	0e 94 ac 02 	call	0x558	; 0x558 <timer_init>

	buttom_init_dir (PIN2,MDIO_PORTD,  BIN_INPUT );  //set bin of inito to be out
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	63 e0       	ldi	r22, 0x03	; 3
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	0e 94 bb 06 	call	0xd76	; 0xd76 <buttom_init_dir>
	//activate pull up resistor
activate_pull_up (PIN2,MDIO_PORTD, BIN_HIGH);//then set it to be high so if pressed it will be low and generate interupt
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	63 e0       	ldi	r22, 0x03	; 3
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	0e 94 d0 06 	call	0xda0	; 0xda0 <activate_pull_up>
	//u8 int0_reading;
	// set two bin outputs for leds
	led_init (PIN0,MDIO_PORTA, BIN_OUTPUT );
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	0e 94 67 06 	call	0xcce	; 0xcce <led_init>
	led_init (PIN1,MDIO_PORTA, BIN_OUTPUT );
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	41 e0       	ldi	r20, 0x01	; 1
 4aa:	0e 94 67 06 	call	0xcce	; 0xcce <led_init>
	led_init (PIN2,MDIO_PORTA, BIN_OUTPUT );
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	0e 94 67 06 	call	0xcce	; 0xcce <led_init>

	led_init (PIN0,MDIO_PORTB, BIN_OUTPUT );
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	41 e0       	ldi	r20, 0x01	; 1
 4be:	0e 94 67 06 	call	0xcce	; 0xcce <led_init>
	led_init (PIN1,MDIO_PORTB, BIN_OUTPUT );
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	0e 94 67 06 	call	0xcce	; 0xcce <led_init>
	led_init (PIN2,MDIO_PORTB, BIN_OUTPUT );
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	41 e0       	ldi	r20, 0x01	; 1
 4d2:	0e 94 67 06 	call	0xcce	; 0xcce <led_init>
//set bin value initialy with zero
	// bin0 green   bin1 yellow   bin2 red
	set_led_value (PIN0, MDIO_PORTA, BIN_LOW);
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	set_led_value (PIN1, MDIO_PORTA, BIN_LOW);
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	set_led_value (PIN2, MDIO_PORTA, BIN_LOW);
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>


	set_led_value(PIN0, MDIO_PORTB, BIN_LOW);
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	61 e0       	ldi	r22, 0x01	; 1
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	set_led_value(PIN1, MDIO_PORTB, BIN_LOW);
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>
	set_led_value(PIN2, MDIO_PORTB, BIN_LOW);
 508:	82 e0       	ldi	r24, 0x02	; 2
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	40 e0       	ldi	r20, 0x00	; 0
 50e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <set_led_value>



	MEXIT_callback( pedestrian_mode);//isr function for push buttom
 512:	8c e1       	ldi	r24, 0x1C	; 28
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <MEXIT_callback>



while(1){

	normal_mode();
 51a:	0e 94 3e 00 	call	0x7c	; 0x7c <normal_mode>
 51e:	fd cf       	rjmp	.-6      	; 0x51a <app_init+0xa8>

00000520 <timer_start>:





void timer_start(void){
 520:	df 93       	push	r29
 522:	cf 93       	push	r28
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
#elif CLK_SOURCE_MODE==PRESCALAR_OVER_256
CLR_BIT(TCCR0,0);
CLR_BIT(TCCR0,1);
SET_BIT(TCCR0,2);
#elif CLK_SOURCE_MODE==PRESCALAR_OVER_1024
SET_BIT(TCCR0,0);
 528:	a3 e5       	ldi	r26, 0x53	; 83
 52a:	b0 e0       	ldi	r27, 0x00	; 0
 52c:	e3 e5       	ldi	r30, 0x53	; 83
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	81 60       	ori	r24, 0x01	; 1
 534:	8c 93       	st	X, r24
CLR_BIT(TCCR0,1);
 536:	a3 e5       	ldi	r26, 0x53	; 83
 538:	b0 e0       	ldi	r27, 0x00	; 0
 53a:	e3 e5       	ldi	r30, 0x53	; 83
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	8d 7f       	andi	r24, 0xFD	; 253
 542:	8c 93       	st	X, r24
SET_BIT(TCCR0,2);
 544:	a3 e5       	ldi	r26, 0x53	; 83
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	e3 e5       	ldi	r30, 0x53	; 83
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	84 60       	ori	r24, 0x04	; 4
 550:	8c 93       	st	X, r24
SET_BIT(TCCR0,0);
SET_BIT(TCCR0,1);
SET_BIT(TCCR0,2);
#endif

}
 552:	cf 91       	pop	r28
 554:	df 91       	pop	r29
 556:	08 95       	ret

00000558 <timer_init>:



void timer_init(){
 558:	df 93       	push	r29
 55a:	cf 93       	push	r28
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62

//SETMODE OF TIMER
#if TIMER0_MODE ==TIMER_NORMAL_MODE
CLR_BIT(TCCR0,3);
 560:	a3 e5       	ldi	r26, 0x53	; 83
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	e3 e5       	ldi	r30, 0x53	; 83
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	87 7f       	andi	r24, 0xF7	; 247
 56c:	8c 93       	st	X, r24
CLR_BIT(TCCR0,6);
 56e:	a3 e5       	ldi	r26, 0x53	; 83
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	e3 e5       	ldi	r30, 0x53	; 83
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	8f 7b       	andi	r24, 0xBF	; 191
 57a:	8c 93       	st	X, r24
//set interrupt state
#if TIMER0_NORMAL_MODE_INTERRUPT == NORMAL_INTERRUPT_DISENABLED
CLR_BIT(TIMSK,0);
 57c:	a9 e5       	ldi	r26, 0x59	; 89
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	e9 e5       	ldi	r30, 0x59	; 89
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	8e 7f       	andi	r24, 0xFE	; 254
 588:	8c 93       	st	X, r24
#endif


#error"wrong mode chosen"
#endif
}
 58a:	cf 91       	pop	r28
 58c:	df 91       	pop	r29
 58e:	08 95       	ret

00000590 <timer0_stop>:




void timer0_stop(void){
 590:	df 93       	push	r29
 592:	cf 93       	push	r28
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
	 TCCR0 &=(0b11111000);//stop timer
 598:	a3 e5       	ldi	r26, 0x53	; 83
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	e3 e5       	ldi	r30, 0x53	; 83
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	88 7f       	andi	r24, 0xF8	; 248
 5a4:	8c 93       	st	X, r24
}
 5a6:	cf 91       	pop	r28
 5a8:	df 91       	pop	r29
 5aa:	08 95       	ret

000005ac <delay_by_ovf>:
void delay_by_ovf(u8 no_of_sec){
 5ac:	df 93       	push	r29
 5ae:	cf 93       	push	r28
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <delay_by_ovf+0x6>
 5b2:	0f 92       	push	r0
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
 5b8:	8b 83       	std	Y+3, r24	; 0x03
	u16 counter=0 ;
 5ba:	1a 82       	std	Y+2, r1	; 0x02
 5bc:	19 82       	std	Y+1, r1	; 0x01
	timer_start();
 5be:	0e 94 90 02 	call	0x520	; 0x520 <timer_start>
	//timer_init( );//start timer
	TCNT0 =0;
 5c2:	e2 e5       	ldi	r30, 0x52	; 82
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	10 82       	st	Z, r1
 5c8:	18 c0       	rjmp	.+48     	; 0x5fa <delay_by_ovf+0x4e>
	while (counter<(61*no_of_sec))
	{
	while ((TIFR &(1<<0)) ==0);//loop untile flage is one this means ovf
 5ca:	e8 e5       	ldi	r30, 0x58	; 88
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	88 2f       	mov	r24, r24
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	81 70       	andi	r24, 0x01	; 1
 5d6:	90 70       	andi	r25, 0x00	; 0
 5d8:	00 97       	sbiw	r24, 0x00	; 0
 5da:	b9 f3       	breq	.-18     	; 0x5ca <delay_by_ovf+0x1e>
	SET_BIT(TIFR,0);// clear flag by settig bet
 5dc:	a8 e5       	ldi	r26, 0x58	; 88
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	e8 e5       	ldi	r30, 0x58	; 88
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	81 60       	ori	r24, 0x01	; 1
 5e8:	8c 93       	st	X, r24
	TCNT0 =0;
 5ea:	e2 e5       	ldi	r30, 0x52	; 82
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	10 82       	st	Z, r1
	counter++;//one ovf
 5f0:	89 81       	ldd	r24, Y+1	; 0x01
 5f2:	9a 81       	ldd	r25, Y+2	; 0x02
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	9a 83       	std	Y+2, r25	; 0x02
 5f8:	89 83       	std	Y+1, r24	; 0x01
void delay_by_ovf(u8 no_of_sec){
	u16 counter=0 ;
	timer_start();
	//timer_init( );//start timer
	TCNT0 =0;
	while (counter<(61*no_of_sec))
 5fa:	8b 81       	ldd	r24, Y+3	; 0x03
 5fc:	28 2f       	mov	r18, r24
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	8d e3       	ldi	r24, 0x3D	; 61
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	ac 01       	movw	r20, r24
 606:	24 9f       	mul	r18, r20
 608:	c0 01       	movw	r24, r0
 60a:	25 9f       	mul	r18, r21
 60c:	90 0d       	add	r25, r0
 60e:	34 9f       	mul	r19, r20
 610:	90 0d       	add	r25, r0
 612:	11 24       	eor	r1, r1
 614:	9c 01       	movw	r18, r24
 616:	89 81       	ldd	r24, Y+1	; 0x01
 618:	9a 81       	ldd	r25, Y+2	; 0x02
 61a:	82 17       	cp	r24, r18
 61c:	93 07       	cpc	r25, r19
 61e:	a8 f2       	brcs	.-86     	; 0x5ca <delay_by_ovf+0x1e>
	SET_BIT(TIFR,0);// clear flag by settig bet
	TCNT0 =0;
	counter++;//one ovf

}
	timer0_stop();
 620:	0e 94 c8 02 	call	0x590	; 0x590 <timer0_stop>
	//TCCR0=0;
	counter=0;
 624:	1a 82       	std	Y+2, r1	; 0x02
 626:	19 82       	std	Y+1, r1	; 0x01



}
 628:	0f 90       	pop	r0
 62a:	0f 90       	pop	r0
 62c:	0f 90       	pop	r0
 62e:	cf 91       	pop	r28
 630:	df 91       	pop	r29
 632:	08 95       	ret

00000634 <mdio_setbinvalue>:
#include "mdio_reg.h"




u8 mdio_setbinvalue (u8 copy_u8binnumber,u8 copy_u8portnumber, u8 copy_u8binvalue){
 634:	df 93       	push	r29
 636:	cf 93       	push	r28
 638:	00 d0       	rcall	.+0      	; 0x63a <mdio_setbinvalue+0x6>
 63a:	00 d0       	rcall	.+0      	; 0x63c <mdio_setbinvalue+0x8>
 63c:	0f 92       	push	r0
 63e:	cd b7       	in	r28, 0x3d	; 61
 640:	de b7       	in	r29, 0x3e	; 62
 642:	89 83       	std	Y+1, r24	; 0x01
 644:	6a 83       	std	Y+2, r22	; 0x02
 646:	4b 83       	std	Y+3, r20	; 0x03

	switch( copy_u8portnumber){
 648:	8a 81       	ldd	r24, Y+2	; 0x02
 64a:	28 2f       	mov	r18, r24
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	3d 83       	std	Y+5, r19	; 0x05
 650:	2c 83       	std	Y+4, r18	; 0x04
 652:	8c 81       	ldd	r24, Y+4	; 0x04
 654:	9d 81       	ldd	r25, Y+5	; 0x05
 656:	81 30       	cpi	r24, 0x01	; 1
 658:	91 05       	cpc	r25, r1
 65a:	09 f4       	brne	.+2      	; 0x65e <mdio_setbinvalue+0x2a>
 65c:	43 c0       	rjmp	.+134    	; 0x6e4 <mdio_setbinvalue+0xb0>
 65e:	2c 81       	ldd	r18, Y+4	; 0x04
 660:	3d 81       	ldd	r19, Y+5	; 0x05
 662:	22 30       	cpi	r18, 0x02	; 2
 664:	31 05       	cpc	r19, r1
 666:	2c f4       	brge	.+10     	; 0x672 <mdio_setbinvalue+0x3e>
 668:	8c 81       	ldd	r24, Y+4	; 0x04
 66a:	9d 81       	ldd	r25, Y+5	; 0x05
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	71 f0       	breq	.+28     	; 0x68c <mdio_setbinvalue+0x58>
 670:	bc c0       	rjmp	.+376    	; 0x7ea <mdio_setbinvalue+0x1b6>
 672:	2c 81       	ldd	r18, Y+4	; 0x04
 674:	3d 81       	ldd	r19, Y+5	; 0x05
 676:	22 30       	cpi	r18, 0x02	; 2
 678:	31 05       	cpc	r19, r1
 67a:	09 f4       	brne	.+2      	; 0x67e <mdio_setbinvalue+0x4a>
 67c:	5f c0       	rjmp	.+190    	; 0x73c <mdio_setbinvalue+0x108>
 67e:	8c 81       	ldd	r24, Y+4	; 0x04
 680:	9d 81       	ldd	r25, Y+5	; 0x05
 682:	83 30       	cpi	r24, 0x03	; 3
 684:	91 05       	cpc	r25, r1
 686:	09 f4       	brne	.+2      	; 0x68a <mdio_setbinvalue+0x56>
 688:	85 c0       	rjmp	.+266    	; 0x794 <mdio_setbinvalue+0x160>
 68a:	af c0       	rjmp	.+350    	; 0x7ea <mdio_setbinvalue+0x1b6>
		case MDIO_PORTA :
		if(copy_u8binvalue == BIN_HIGH){
 68c:	8b 81       	ldd	r24, Y+3	; 0x03
 68e:	81 30       	cpi	r24, 0x01	; 1
 690:	a1 f4       	brne	.+40     	; 0x6ba <mdio_setbinvalue+0x86>
		SET_BIT(PORTA,copy_u8binnumber);}
 692:	ab e3       	ldi	r26, 0x3B	; 59
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	eb e3       	ldi	r30, 0x3B	; 59
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	48 2f       	mov	r20, r24
 69e:	89 81       	ldd	r24, Y+1	; 0x01
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	02 2e       	mov	r0, r18
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <mdio_setbinvalue+0x7c>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	0a 94       	dec	r0
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <mdio_setbinvalue+0x78>
 6b4:	84 2b       	or	r24, r20
 6b6:	8c 93       	st	X, r24
 6b8:	98 c0       	rjmp	.+304    	; 0x7ea <mdio_setbinvalue+0x1b6>
		else {
			CLR_BIT(PORTA,copy_u8binnumber) ;
 6ba:	ab e3       	ldi	r26, 0x3B	; 59
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	eb e3       	ldi	r30, 0x3B	; 59
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	80 81       	ld	r24, Z
 6c4:	48 2f       	mov	r20, r24
 6c6:	89 81       	ldd	r24, Y+1	; 0x01
 6c8:	28 2f       	mov	r18, r24
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	02 2e       	mov	r0, r18
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <mdio_setbinvalue+0xa4>
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	0a 94       	dec	r0
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <mdio_setbinvalue+0xa0>
 6dc:	80 95       	com	r24
 6de:	84 23       	and	r24, r20
 6e0:	8c 93       	st	X, r24
 6e2:	83 c0       	rjmp	.+262    	; 0x7ea <mdio_setbinvalue+0x1b6>
		}
		break;
		case MDIO_PORTB :
			if (copy_u8binvalue==BIN_HIGH){
 6e4:	8b 81       	ldd	r24, Y+3	; 0x03
 6e6:	81 30       	cpi	r24, 0x01	; 1
 6e8:	a1 f4       	brne	.+40     	; 0x712 <mdio_setbinvalue+0xde>
				SET_BIT(PORTB,copy_u8binnumber);}
 6ea:	a8 e3       	ldi	r26, 0x38	; 56
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	e8 e3       	ldi	r30, 0x38	; 56
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	48 2f       	mov	r20, r24
 6f6:	89 81       	ldd	r24, Y+1	; 0x01
 6f8:	28 2f       	mov	r18, r24
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	02 2e       	mov	r0, r18
 702:	02 c0       	rjmp	.+4      	; 0x708 <mdio_setbinvalue+0xd4>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	0a 94       	dec	r0
 70a:	e2 f7       	brpl	.-8      	; 0x704 <mdio_setbinvalue+0xd0>
 70c:	84 2b       	or	r24, r20
 70e:	8c 93       	st	X, r24
 710:	6c c0       	rjmp	.+216    	; 0x7ea <mdio_setbinvalue+0x1b6>
			else {
				CLR_BIT(PORTB,copy_u8binnumber) ;
 712:	a8 e3       	ldi	r26, 0x38	; 56
 714:	b0 e0       	ldi	r27, 0x00	; 0
 716:	e8 e3       	ldi	r30, 0x38	; 56
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	48 2f       	mov	r20, r24
 71e:	89 81       	ldd	r24, Y+1	; 0x01
 720:	28 2f       	mov	r18, r24
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	02 2e       	mov	r0, r18
 72a:	02 c0       	rjmp	.+4      	; 0x730 <mdio_setbinvalue+0xfc>
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	0a 94       	dec	r0
 732:	e2 f7       	brpl	.-8      	; 0x72c <mdio_setbinvalue+0xf8>
 734:	80 95       	com	r24
 736:	84 23       	and	r24, r20
 738:	8c 93       	st	X, r24
 73a:	57 c0       	rjmp	.+174    	; 0x7ea <mdio_setbinvalue+0x1b6>
			}
		break;

		case MDIO_PORTC:
			if (copy_u8binvalue==BIN_HIGH)
 73c:	8b 81       	ldd	r24, Y+3	; 0x03
 73e:	81 30       	cpi	r24, 0x01	; 1
 740:	a1 f4       	brne	.+40     	; 0x76a <mdio_setbinvalue+0x136>
				{SET_BIT(PORTC,copy_u8binnumber);}
 742:	a5 e3       	ldi	r26, 0x35	; 53
 744:	b0 e0       	ldi	r27, 0x00	; 0
 746:	e5 e3       	ldi	r30, 0x35	; 53
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	80 81       	ld	r24, Z
 74c:	48 2f       	mov	r20, r24
 74e:	89 81       	ldd	r24, Y+1	; 0x01
 750:	28 2f       	mov	r18, r24
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	02 2e       	mov	r0, r18
 75a:	02 c0       	rjmp	.+4      	; 0x760 <mdio_setbinvalue+0x12c>
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	0a 94       	dec	r0
 762:	e2 f7       	brpl	.-8      	; 0x75c <mdio_setbinvalue+0x128>
 764:	84 2b       	or	r24, r20
 766:	8c 93       	st	X, r24
 768:	40 c0       	rjmp	.+128    	; 0x7ea <mdio_setbinvalue+0x1b6>
			else {CLR_BIT(PORTC,copy_u8binnumber) ;}
 76a:	a5 e3       	ldi	r26, 0x35	; 53
 76c:	b0 e0       	ldi	r27, 0x00	; 0
 76e:	e5 e3       	ldi	r30, 0x35	; 53
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	80 81       	ld	r24, Z
 774:	48 2f       	mov	r20, r24
 776:	89 81       	ldd	r24, Y+1	; 0x01
 778:	28 2f       	mov	r18, r24
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	02 2e       	mov	r0, r18
 782:	02 c0       	rjmp	.+4      	; 0x788 <mdio_setbinvalue+0x154>
 784:	88 0f       	add	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	0a 94       	dec	r0
 78a:	e2 f7       	brpl	.-8      	; 0x784 <mdio_setbinvalue+0x150>
 78c:	80 95       	com	r24
 78e:	84 23       	and	r24, r20
 790:	8c 93       	st	X, r24
 792:	2b c0       	rjmp	.+86     	; 0x7ea <mdio_setbinvalue+0x1b6>
		break;
		case MDIO_PORTD:
			if (copy_u8binvalue==BIN_HIGH)
 794:	8b 81       	ldd	r24, Y+3	; 0x03
 796:	81 30       	cpi	r24, 0x01	; 1
 798:	a1 f4       	brne	.+40     	; 0x7c2 <mdio_setbinvalue+0x18e>
				{SET_BIT(PORTD,copy_u8binnumber);}
 79a:	a2 e3       	ldi	r26, 0x32	; 50
 79c:	b0 e0       	ldi	r27, 0x00	; 0
 79e:	e2 e3       	ldi	r30, 0x32	; 50
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	48 2f       	mov	r20, r24
 7a6:	89 81       	ldd	r24, Y+1	; 0x01
 7a8:	28 2f       	mov	r18, r24
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	02 2e       	mov	r0, r18
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <mdio_setbinvalue+0x184>
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	0a 94       	dec	r0
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <mdio_setbinvalue+0x180>
 7bc:	84 2b       	or	r24, r20
 7be:	8c 93       	st	X, r24
 7c0:	14 c0       	rjmp	.+40     	; 0x7ea <mdio_setbinvalue+0x1b6>
			else {
				CLR_BIT(PORTD,copy_u8binnumber) ;
 7c2:	a2 e3       	ldi	r26, 0x32	; 50
 7c4:	b0 e0       	ldi	r27, 0x00	; 0
 7c6:	e2 e3       	ldi	r30, 0x32	; 50
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	80 81       	ld	r24, Z
 7cc:	48 2f       	mov	r20, r24
 7ce:	89 81       	ldd	r24, Y+1	; 0x01
 7d0:	28 2f       	mov	r18, r24
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	02 2e       	mov	r0, r18
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <mdio_setbinvalue+0x1ac>
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	0a 94       	dec	r0
 7e2:	e2 f7       	brpl	.-8      	; 0x7dc <mdio_setbinvalue+0x1a8>
 7e4:	80 95       	com	r24
 7e6:	84 23       	and	r24, r20
 7e8:	8c 93       	st	X, r24
		break;
	}


	if (1 ){
				return ok;
 7ea:	80 e0       	ldi	r24, 0x00	; 0
			}
			else {
				return error;
			}
}
 7ec:	0f 90       	pop	r0
 7ee:	0f 90       	pop	r0
 7f0:	0f 90       	pop	r0
 7f2:	0f 90       	pop	r0
 7f4:	0f 90       	pop	r0
 7f6:	cf 91       	pop	r28
 7f8:	df 91       	pop	r29
 7fa:	08 95       	ret

000007fc <mdio_Readbin>:


u8  mdio_Readbin  (u8 copy_u8binnumber,u8 copy_u8portnumber, u8 * p_u8portreading ){
 7fc:	df 93       	push	r29
 7fe:	cf 93       	push	r28
 800:	00 d0       	rcall	.+0      	; 0x802 <mdio_Readbin+0x6>
 802:	00 d0       	rcall	.+0      	; 0x804 <mdio_Readbin+0x8>
 804:	00 d0       	rcall	.+0      	; 0x806 <mdio_Readbin+0xa>
 806:	cd b7       	in	r28, 0x3d	; 61
 808:	de b7       	in	r29, 0x3e	; 62
 80a:	89 83       	std	Y+1, r24	; 0x01
 80c:	6a 83       	std	Y+2, r22	; 0x02
 80e:	5c 83       	std	Y+4, r21	; 0x04
 810:	4b 83       	std	Y+3, r20	; 0x03


	switch(copy_u8portnumber)
 812:	8a 81       	ldd	r24, Y+2	; 0x02
 814:	28 2f       	mov	r18, r24
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	3e 83       	std	Y+6, r19	; 0x06
 81a:	2d 83       	std	Y+5, r18	; 0x05
 81c:	4d 81       	ldd	r20, Y+5	; 0x05
 81e:	5e 81       	ldd	r21, Y+6	; 0x06
 820:	41 30       	cpi	r20, 0x01	; 1
 822:	51 05       	cpc	r21, r1
 824:	59 f1       	breq	.+86     	; 0x87c <__stack+0x1d>
 826:	8d 81       	ldd	r24, Y+5	; 0x05
 828:	9e 81       	ldd	r25, Y+6	; 0x06
 82a:	82 30       	cpi	r24, 0x02	; 2
 82c:	91 05       	cpc	r25, r1
 82e:	34 f4       	brge	.+12     	; 0x83c <mdio_Readbin+0x40>
 830:	2d 81       	ldd	r18, Y+5	; 0x05
 832:	3e 81       	ldd	r19, Y+6	; 0x06
 834:	21 15       	cp	r18, r1
 836:	31 05       	cpc	r19, r1
 838:	69 f0       	breq	.+26     	; 0x854 <mdio_Readbin+0x58>
 83a:	5b c0       	rjmp	.+182    	; 0x8f2 <__stack+0x93>
 83c:	4d 81       	ldd	r20, Y+5	; 0x05
 83e:	5e 81       	ldd	r21, Y+6	; 0x06
 840:	42 30       	cpi	r20, 0x02	; 2
 842:	51 05       	cpc	r21, r1
 844:	79 f1       	breq	.+94     	; 0x8a4 <__stack+0x45>
 846:	8d 81       	ldd	r24, Y+5	; 0x05
 848:	9e 81       	ldd	r25, Y+6	; 0x06
 84a:	83 30       	cpi	r24, 0x03	; 3
 84c:	91 05       	cpc	r25, r1
 84e:	09 f4       	brne	.+2      	; 0x852 <mdio_Readbin+0x56>
 850:	3d c0       	rjmp	.+122    	; 0x8cc <__stack+0x6d>
 852:	4f c0       	rjmp	.+158    	; 0x8f2 <__stack+0x93>
	{case MDIO_PORTA:*p_u8portreading=GET_BIT(PINA,copy_u8binnumber);
 854:	e9 e3       	ldi	r30, 0x39	; 57
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	80 81       	ld	r24, Z
 85a:	28 2f       	mov	r18, r24
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	89 81       	ldd	r24, Y+1	; 0x01
 860:	88 2f       	mov	r24, r24
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	a9 01       	movw	r20, r18
 866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
 868:	55 95       	asr	r21
 86a:	47 95       	ror	r20
 86c:	8a 95       	dec	r24
 86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
 870:	ca 01       	movw	r24, r20
 872:	81 70       	andi	r24, 0x01	; 1
 874:	eb 81       	ldd	r30, Y+3	; 0x03
 876:	fc 81       	ldd	r31, Y+4	; 0x04
 878:	80 83       	st	Z, r24
 87a:	3b c0       	rjmp	.+118    	; 0x8f2 <__stack+0x93>
		break;

	case MDIO_PORTB:*p_u8portreading=GET_BIT(PINB,copy_u8binnumber);
 87c:	e6 e3       	ldi	r30, 0x36	; 54
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	28 2f       	mov	r18, r24
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	89 81       	ldd	r24, Y+1	; 0x01
 888:	88 2f       	mov	r24, r24
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	a9 01       	movw	r20, r18
 88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
 890:	55 95       	asr	r21
 892:	47 95       	ror	r20
 894:	8a 95       	dec	r24
 896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
 898:	ca 01       	movw	r24, r20
 89a:	81 70       	andi	r24, 0x01	; 1
 89c:	eb 81       	ldd	r30, Y+3	; 0x03
 89e:	fc 81       	ldd	r31, Y+4	; 0x04
 8a0:	80 83       	st	Z, r24
 8a2:	27 c0       	rjmp	.+78     	; 0x8f2 <__stack+0x93>

			break;

	case MDIO_PORTC:*p_u8portreading=GET_BIT(PINC,copy_u8binnumber);
 8a4:	e3 e3       	ldi	r30, 0x33	; 51
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	80 81       	ld	r24, Z
 8aa:	28 2f       	mov	r18, r24
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	89 81       	ldd	r24, Y+1	; 0x01
 8b0:	88 2f       	mov	r24, r24
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	a9 01       	movw	r20, r18
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__stack+0x5d>
 8b8:	55 95       	asr	r21
 8ba:	47 95       	ror	r20
 8bc:	8a 95       	dec	r24
 8be:	e2 f7       	brpl	.-8      	; 0x8b8 <__stack+0x59>
 8c0:	ca 01       	movw	r24, r20
 8c2:	81 70       	andi	r24, 0x01	; 1
 8c4:	eb 81       	ldd	r30, Y+3	; 0x03
 8c6:	fc 81       	ldd	r31, Y+4	; 0x04
 8c8:	80 83       	st	Z, r24
 8ca:	13 c0       	rjmp	.+38     	; 0x8f2 <__stack+0x93>
			break;

	case MDIO_PORTD:*p_u8portreading=GET_BIT(PIND,copy_u8binnumber);
 8cc:	e0 e3       	ldi	r30, 0x30	; 48
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	80 81       	ld	r24, Z
 8d2:	28 2f       	mov	r18, r24
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	89 81       	ldd	r24, Y+1	; 0x01
 8d8:	88 2f       	mov	r24, r24
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	a9 01       	movw	r20, r18
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <__stack+0x85>
 8e0:	55 95       	asr	r21
 8e2:	47 95       	ror	r20
 8e4:	8a 95       	dec	r24
 8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <__stack+0x81>
 8e8:	ca 01       	movw	r24, r20
 8ea:	81 70       	andi	r24, 0x01	; 1
 8ec:	eb 81       	ldd	r30, Y+3	; 0x03
 8ee:	fc 81       	ldd	r31, Y+4	; 0x04
 8f0:	80 83       	st	Z, r24

}


	if (1 ){
				return ok;
 8f2:	80 e0       	ldi	r24, 0x00	; 0
			}
			else {
				return error;
			}
}
 8f4:	26 96       	adiw	r28, 0x06	; 6
 8f6:	0f b6       	in	r0, 0x3f	; 63
 8f8:	f8 94       	cli
 8fa:	de bf       	out	0x3e, r29	; 62
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	cd bf       	out	0x3d, r28	; 61
 900:	cf 91       	pop	r28
 902:	df 91       	pop	r29
 904:	08 95       	ret

00000906 <mdio_togglepin>:
u8 mdio_togglepin(u8 copy_u8binnumber,u8 copy_u8portnumber ){
 906:	df 93       	push	r29
 908:	cf 93       	push	r28
 90a:	00 d0       	rcall	.+0      	; 0x90c <mdio_togglepin+0x6>
 90c:	00 d0       	rcall	.+0      	; 0x90e <mdio_togglepin+0x8>
 90e:	cd b7       	in	r28, 0x3d	; 61
 910:	de b7       	in	r29, 0x3e	; 62
 912:	89 83       	std	Y+1, r24	; 0x01
 914:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8portnumber)
 916:	8a 81       	ldd	r24, Y+2	; 0x02
 918:	28 2f       	mov	r18, r24
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	3c 83       	std	Y+4, r19	; 0x04
 91e:	2b 83       	std	Y+3, r18	; 0x03
 920:	8b 81       	ldd	r24, Y+3	; 0x03
 922:	9c 81       	ldd	r25, Y+4	; 0x04
 924:	81 30       	cpi	r24, 0x01	; 1
 926:	91 05       	cpc	r25, r1
 928:	49 f1       	breq	.+82     	; 0x97c <mdio_togglepin+0x76>
 92a:	2b 81       	ldd	r18, Y+3	; 0x03
 92c:	3c 81       	ldd	r19, Y+4	; 0x04
 92e:	22 30       	cpi	r18, 0x02	; 2
 930:	31 05       	cpc	r19, r1
 932:	2c f4       	brge	.+10     	; 0x93e <mdio_togglepin+0x38>
 934:	8b 81       	ldd	r24, Y+3	; 0x03
 936:	9c 81       	ldd	r25, Y+4	; 0x04
 938:	00 97       	sbiw	r24, 0x00	; 0
 93a:	61 f0       	breq	.+24     	; 0x954 <mdio_togglepin+0x4e>
 93c:	5a c0       	rjmp	.+180    	; 0x9f2 <mdio_togglepin+0xec>
 93e:	2b 81       	ldd	r18, Y+3	; 0x03
 940:	3c 81       	ldd	r19, Y+4	; 0x04
 942:	22 30       	cpi	r18, 0x02	; 2
 944:	31 05       	cpc	r19, r1
 946:	71 f1       	breq	.+92     	; 0x9a4 <mdio_togglepin+0x9e>
 948:	8b 81       	ldd	r24, Y+3	; 0x03
 94a:	9c 81       	ldd	r25, Y+4	; 0x04
 94c:	83 30       	cpi	r24, 0x03	; 3
 94e:	91 05       	cpc	r25, r1
 950:	e9 f1       	breq	.+122    	; 0x9cc <mdio_togglepin+0xc6>
 952:	4f c0       	rjmp	.+158    	; 0x9f2 <mdio_togglepin+0xec>
	{case MDIO_PORTA:TOGGLE_BIT(PORTA,copy_u8binnumber);
 954:	ab e3       	ldi	r26, 0x3B	; 59
 956:	b0 e0       	ldi	r27, 0x00	; 0
 958:	eb e3       	ldi	r30, 0x3B	; 59
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	80 81       	ld	r24, Z
 95e:	48 2f       	mov	r20, r24
 960:	89 81       	ldd	r24, Y+1	; 0x01
 962:	28 2f       	mov	r18, r24
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	02 2e       	mov	r0, r18
 96c:	02 c0       	rjmp	.+4      	; 0x972 <mdio_togglepin+0x6c>
 96e:	88 0f       	add	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	0a 94       	dec	r0
 974:	e2 f7       	brpl	.-8      	; 0x96e <mdio_togglepin+0x68>
 976:	84 27       	eor	r24, r20
 978:	8c 93       	st	X, r24
 97a:	3b c0       	rjmp	.+118    	; 0x9f2 <mdio_togglepin+0xec>
		break;

	case MDIO_PORTB:TOGGLE_BIT(PORTB,copy_u8binnumber);
 97c:	a8 e3       	ldi	r26, 0x38	; 56
 97e:	b0 e0       	ldi	r27, 0x00	; 0
 980:	e8 e3       	ldi	r30, 0x38	; 56
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	80 81       	ld	r24, Z
 986:	48 2f       	mov	r20, r24
 988:	89 81       	ldd	r24, Y+1	; 0x01
 98a:	28 2f       	mov	r18, r24
 98c:	30 e0       	ldi	r19, 0x00	; 0
 98e:	81 e0       	ldi	r24, 0x01	; 1
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	02 2e       	mov	r0, r18
 994:	02 c0       	rjmp	.+4      	; 0x99a <mdio_togglepin+0x94>
 996:	88 0f       	add	r24, r24
 998:	99 1f       	adc	r25, r25
 99a:	0a 94       	dec	r0
 99c:	e2 f7       	brpl	.-8      	; 0x996 <mdio_togglepin+0x90>
 99e:	84 27       	eor	r24, r20
 9a0:	8c 93       	st	X, r24
 9a2:	27 c0       	rjmp	.+78     	; 0x9f2 <mdio_togglepin+0xec>
			break;

	case MDIO_PORTC:TOGGLE_BIT(PORTC,copy_u8binnumber);
 9a4:	a5 e3       	ldi	r26, 0x35	; 53
 9a6:	b0 e0       	ldi	r27, 0x00	; 0
 9a8:	e5 e3       	ldi	r30, 0x35	; 53
 9aa:	f0 e0       	ldi	r31, 0x00	; 0
 9ac:	80 81       	ld	r24, Z
 9ae:	48 2f       	mov	r20, r24
 9b0:	89 81       	ldd	r24, Y+1	; 0x01
 9b2:	28 2f       	mov	r18, r24
 9b4:	30 e0       	ldi	r19, 0x00	; 0
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	02 2e       	mov	r0, r18
 9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <mdio_togglepin+0xbc>
 9be:	88 0f       	add	r24, r24
 9c0:	99 1f       	adc	r25, r25
 9c2:	0a 94       	dec	r0
 9c4:	e2 f7       	brpl	.-8      	; 0x9be <mdio_togglepin+0xb8>
 9c6:	84 27       	eor	r24, r20
 9c8:	8c 93       	st	X, r24
 9ca:	13 c0       	rjmp	.+38     	; 0x9f2 <mdio_togglepin+0xec>
			break;

	case MDIO_PORTD:TOGGLE_BIT(PORTD,copy_u8binnumber);
 9cc:	a2 e3       	ldi	r26, 0x32	; 50
 9ce:	b0 e0       	ldi	r27, 0x00	; 0
 9d0:	e2 e3       	ldi	r30, 0x32	; 50
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	80 81       	ld	r24, Z
 9d6:	48 2f       	mov	r20, r24
 9d8:	89 81       	ldd	r24, Y+1	; 0x01
 9da:	28 2f       	mov	r18, r24
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	02 2e       	mov	r0, r18
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <mdio_togglepin+0xe4>
 9e6:	88 0f       	add	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	0a 94       	dec	r0
 9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <mdio_togglepin+0xe0>
 9ee:	84 27       	eor	r24, r20
 9f0:	8c 93       	st	X, r24
		break;


}
	if (1 ){
				return ok;
 9f2:	80 e0       	ldi	r24, 0x00	; 0
			}
			else {
				return error;
			}
}
 9f4:	0f 90       	pop	r0
 9f6:	0f 90       	pop	r0
 9f8:	0f 90       	pop	r0
 9fa:	0f 90       	pop	r0
 9fc:	cf 91       	pop	r28
 9fe:	df 91       	pop	r29
 a00:	08 95       	ret

00000a02 <mdio_setbindirection>:

u8 mdio_setbindirection (u8 copy_u8binnumber,u8 copy_u8portnumber, u8 copy_u8bindir){
 a02:	df 93       	push	r29
 a04:	cf 93       	push	r28
 a06:	00 d0       	rcall	.+0      	; 0xa08 <mdio_setbindirection+0x6>
 a08:	00 d0       	rcall	.+0      	; 0xa0a <mdio_setbindirection+0x8>
 a0a:	0f 92       	push	r0
 a0c:	cd b7       	in	r28, 0x3d	; 61
 a0e:	de b7       	in	r29, 0x3e	; 62
 a10:	89 83       	std	Y+1, r24	; 0x01
 a12:	6a 83       	std	Y+2, r22	; 0x02
 a14:	4b 83       	std	Y+3, r20	; 0x03

 	switch(copy_u8portnumber)
 a16:	8a 81       	ldd	r24, Y+2	; 0x02
 a18:	28 2f       	mov	r18, r24
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	3d 83       	std	Y+5, r19	; 0x05
 a1e:	2c 83       	std	Y+4, r18	; 0x04
 a20:	8c 81       	ldd	r24, Y+4	; 0x04
 a22:	9d 81       	ldd	r25, Y+5	; 0x05
 a24:	81 30       	cpi	r24, 0x01	; 1
 a26:	91 05       	cpc	r25, r1
 a28:	09 f4       	brne	.+2      	; 0xa2c <mdio_setbindirection+0x2a>
 a2a:	47 c0       	rjmp	.+142    	; 0xaba <mdio_setbindirection+0xb8>
 a2c:	2c 81       	ldd	r18, Y+4	; 0x04
 a2e:	3d 81       	ldd	r19, Y+5	; 0x05
 a30:	22 30       	cpi	r18, 0x02	; 2
 a32:	31 05       	cpc	r19, r1
 a34:	2c f4       	brge	.+10     	; 0xa40 <mdio_setbindirection+0x3e>
 a36:	8c 81       	ldd	r24, Y+4	; 0x04
 a38:	9d 81       	ldd	r25, Y+5	; 0x05
 a3a:	00 97       	sbiw	r24, 0x00	; 0
 a3c:	71 f0       	breq	.+28     	; 0xa5a <mdio_setbindirection+0x58>
 a3e:	cb c0       	rjmp	.+406    	; 0xbd6 <mdio_setbindirection+0x1d4>
 a40:	2c 81       	ldd	r18, Y+4	; 0x04
 a42:	3d 81       	ldd	r19, Y+5	; 0x05
 a44:	22 30       	cpi	r18, 0x02	; 2
 a46:	31 05       	cpc	r19, r1
 a48:	09 f4       	brne	.+2      	; 0xa4c <mdio_setbindirection+0x4a>
 a4a:	67 c0       	rjmp	.+206    	; 0xb1a <mdio_setbindirection+0x118>
 a4c:	8c 81       	ldd	r24, Y+4	; 0x04
 a4e:	9d 81       	ldd	r25, Y+5	; 0x05
 a50:	83 30       	cpi	r24, 0x03	; 3
 a52:	91 05       	cpc	r25, r1
 a54:	09 f4       	brne	.+2      	; 0xa58 <mdio_setbindirection+0x56>
 a56:	91 c0       	rjmp	.+290    	; 0xb7a <mdio_setbindirection+0x178>
 a58:	be c0       	rjmp	.+380    	; 0xbd6 <mdio_setbindirection+0x1d4>
 	{case MDIO_PORTA:
 		if (copy_u8bindir==BIN_OUTPUT) {SET_BIT(DDRA,copy_u8binnumber) ;}
 a5a:	8b 81       	ldd	r24, Y+3	; 0x03
 a5c:	81 30       	cpi	r24, 0x01	; 1
 a5e:	a1 f4       	brne	.+40     	; 0xa88 <mdio_setbindirection+0x86>
 a60:	aa e3       	ldi	r26, 0x3A	; 58
 a62:	b0 e0       	ldi	r27, 0x00	; 0
 a64:	ea e3       	ldi	r30, 0x3A	; 58
 a66:	f0 e0       	ldi	r31, 0x00	; 0
 a68:	80 81       	ld	r24, Z
 a6a:	48 2f       	mov	r20, r24
 a6c:	89 81       	ldd	r24, Y+1	; 0x01
 a6e:	28 2f       	mov	r18, r24
 a70:	30 e0       	ldi	r19, 0x00	; 0
 a72:	81 e0       	ldi	r24, 0x01	; 1
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	02 2e       	mov	r0, r18
 a78:	02 c0       	rjmp	.+4      	; 0xa7e <mdio_setbindirection+0x7c>
 a7a:	88 0f       	add	r24, r24
 a7c:	99 1f       	adc	r25, r25
 a7e:	0a 94       	dec	r0
 a80:	e2 f7       	brpl	.-8      	; 0xa7a <mdio_setbindirection+0x78>
 a82:	84 2b       	or	r24, r20
 a84:	8c 93       	st	X, r24
 a86:	a7 c0       	rjmp	.+334    	; 0xbd6 <mdio_setbindirection+0x1d4>
 		else if (copy_u8bindir==BIN_INPUT){CLR_BIT(DDRA,copy_u8binnumber);}
 a88:	8b 81       	ldd	r24, Y+3	; 0x03
 a8a:	88 23       	and	r24, r24
 a8c:	09 f0       	breq	.+2      	; 0xa90 <mdio_setbindirection+0x8e>
 a8e:	a3 c0       	rjmp	.+326    	; 0xbd6 <mdio_setbindirection+0x1d4>
 a90:	aa e3       	ldi	r26, 0x3A	; 58
 a92:	b0 e0       	ldi	r27, 0x00	; 0
 a94:	ea e3       	ldi	r30, 0x3A	; 58
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	80 81       	ld	r24, Z
 a9a:	48 2f       	mov	r20, r24
 a9c:	89 81       	ldd	r24, Y+1	; 0x01
 a9e:	28 2f       	mov	r18, r24
 aa0:	30 e0       	ldi	r19, 0x00	; 0
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	02 2e       	mov	r0, r18
 aa8:	02 c0       	rjmp	.+4      	; 0xaae <mdio_setbindirection+0xac>
 aaa:	88 0f       	add	r24, r24
 aac:	99 1f       	adc	r25, r25
 aae:	0a 94       	dec	r0
 ab0:	e2 f7       	brpl	.-8      	; 0xaaa <mdio_setbindirection+0xa8>
 ab2:	80 95       	com	r24
 ab4:	84 23       	and	r24, r20
 ab6:	8c 93       	st	X, r24
 ab8:	8e c0       	rjmp	.+284    	; 0xbd6 <mdio_setbindirection+0x1d4>

 		break;

 	case MDIO_PORTB:
 			if (copy_u8bindir==BIN_OUTPUT) {SET_BIT(DDRB,copy_u8binnumber) ;}
 aba:	8b 81       	ldd	r24, Y+3	; 0x03
 abc:	81 30       	cpi	r24, 0x01	; 1
 abe:	a1 f4       	brne	.+40     	; 0xae8 <mdio_setbindirection+0xe6>
 ac0:	a7 e3       	ldi	r26, 0x37	; 55
 ac2:	b0 e0       	ldi	r27, 0x00	; 0
 ac4:	e7 e3       	ldi	r30, 0x37	; 55
 ac6:	f0 e0       	ldi	r31, 0x00	; 0
 ac8:	80 81       	ld	r24, Z
 aca:	48 2f       	mov	r20, r24
 acc:	89 81       	ldd	r24, Y+1	; 0x01
 ace:	28 2f       	mov	r18, r24
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	02 2e       	mov	r0, r18
 ad8:	02 c0       	rjmp	.+4      	; 0xade <mdio_setbindirection+0xdc>
 ada:	88 0f       	add	r24, r24
 adc:	99 1f       	adc	r25, r25
 ade:	0a 94       	dec	r0
 ae0:	e2 f7       	brpl	.-8      	; 0xada <mdio_setbindirection+0xd8>
 ae2:	84 2b       	or	r24, r20
 ae4:	8c 93       	st	X, r24
 ae6:	77 c0       	rjmp	.+238    	; 0xbd6 <mdio_setbindirection+0x1d4>
 			else if (copy_u8bindir==BIN_INPUT){CLR_BIT(DDRB,copy_u8binnumber);}
 ae8:	8b 81       	ldd	r24, Y+3	; 0x03
 aea:	88 23       	and	r24, r24
 aec:	09 f0       	breq	.+2      	; 0xaf0 <mdio_setbindirection+0xee>
 aee:	73 c0       	rjmp	.+230    	; 0xbd6 <mdio_setbindirection+0x1d4>
 af0:	a7 e3       	ldi	r26, 0x37	; 55
 af2:	b0 e0       	ldi	r27, 0x00	; 0
 af4:	e7 e3       	ldi	r30, 0x37	; 55
 af6:	f0 e0       	ldi	r31, 0x00	; 0
 af8:	80 81       	ld	r24, Z
 afa:	48 2f       	mov	r20, r24
 afc:	89 81       	ldd	r24, Y+1	; 0x01
 afe:	28 2f       	mov	r18, r24
 b00:	30 e0       	ldi	r19, 0x00	; 0
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	02 2e       	mov	r0, r18
 b08:	02 c0       	rjmp	.+4      	; 0xb0e <mdio_setbindirection+0x10c>
 b0a:	88 0f       	add	r24, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	0a 94       	dec	r0
 b10:	e2 f7       	brpl	.-8      	; 0xb0a <mdio_setbindirection+0x108>
 b12:	80 95       	com	r24
 b14:	84 23       	and	r24, r20
 b16:	8c 93       	st	X, r24
 b18:	5e c0       	rjmp	.+188    	; 0xbd6 <mdio_setbindirection+0x1d4>

 			break;

 	case MDIO_PORTC:
 			if (copy_u8bindir==BIN_OUTPUT) {SET_BIT(DDRC,copy_u8binnumber) ;}
 b1a:	8b 81       	ldd	r24, Y+3	; 0x03
 b1c:	81 30       	cpi	r24, 0x01	; 1
 b1e:	a1 f4       	brne	.+40     	; 0xb48 <mdio_setbindirection+0x146>
 b20:	a4 e3       	ldi	r26, 0x34	; 52
 b22:	b0 e0       	ldi	r27, 0x00	; 0
 b24:	e4 e3       	ldi	r30, 0x34	; 52
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	80 81       	ld	r24, Z
 b2a:	48 2f       	mov	r20, r24
 b2c:	89 81       	ldd	r24, Y+1	; 0x01
 b2e:	28 2f       	mov	r18, r24
 b30:	30 e0       	ldi	r19, 0x00	; 0
 b32:	81 e0       	ldi	r24, 0x01	; 1
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	02 2e       	mov	r0, r18
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <mdio_setbindirection+0x13c>
 b3a:	88 0f       	add	r24, r24
 b3c:	99 1f       	adc	r25, r25
 b3e:	0a 94       	dec	r0
 b40:	e2 f7       	brpl	.-8      	; 0xb3a <mdio_setbindirection+0x138>
 b42:	84 2b       	or	r24, r20
 b44:	8c 93       	st	X, r24
 b46:	47 c0       	rjmp	.+142    	; 0xbd6 <mdio_setbindirection+0x1d4>
 			else if (copy_u8bindir==BIN_INPUT){CLR_BIT(DDRC,copy_u8binnumber);}
 b48:	8b 81       	ldd	r24, Y+3	; 0x03
 b4a:	88 23       	and	r24, r24
 b4c:	09 f0       	breq	.+2      	; 0xb50 <mdio_setbindirection+0x14e>
 b4e:	43 c0       	rjmp	.+134    	; 0xbd6 <mdio_setbindirection+0x1d4>
 b50:	a4 e3       	ldi	r26, 0x34	; 52
 b52:	b0 e0       	ldi	r27, 0x00	; 0
 b54:	e4 e3       	ldi	r30, 0x34	; 52
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	80 81       	ld	r24, Z
 b5a:	48 2f       	mov	r20, r24
 b5c:	89 81       	ldd	r24, Y+1	; 0x01
 b5e:	28 2f       	mov	r18, r24
 b60:	30 e0       	ldi	r19, 0x00	; 0
 b62:	81 e0       	ldi	r24, 0x01	; 1
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	02 2e       	mov	r0, r18
 b68:	02 c0       	rjmp	.+4      	; 0xb6e <mdio_setbindirection+0x16c>
 b6a:	88 0f       	add	r24, r24
 b6c:	99 1f       	adc	r25, r25
 b6e:	0a 94       	dec	r0
 b70:	e2 f7       	brpl	.-8      	; 0xb6a <mdio_setbindirection+0x168>
 b72:	80 95       	com	r24
 b74:	84 23       	and	r24, r20
 b76:	8c 93       	st	X, r24
 b78:	2e c0       	rjmp	.+92     	; 0xbd6 <mdio_setbindirection+0x1d4>

 			break;

 	case MDIO_PORTD:
 			if (copy_u8bindir==BIN_OUTPUT) {SET_BIT(DDRD,copy_u8binnumber) ;}
 b7a:	8b 81       	ldd	r24, Y+3	; 0x03
 b7c:	81 30       	cpi	r24, 0x01	; 1
 b7e:	a1 f4       	brne	.+40     	; 0xba8 <mdio_setbindirection+0x1a6>
 b80:	a1 e3       	ldi	r26, 0x31	; 49
 b82:	b0 e0       	ldi	r27, 0x00	; 0
 b84:	e1 e3       	ldi	r30, 0x31	; 49
 b86:	f0 e0       	ldi	r31, 0x00	; 0
 b88:	80 81       	ld	r24, Z
 b8a:	48 2f       	mov	r20, r24
 b8c:	89 81       	ldd	r24, Y+1	; 0x01
 b8e:	28 2f       	mov	r18, r24
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	81 e0       	ldi	r24, 0x01	; 1
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	02 2e       	mov	r0, r18
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <mdio_setbindirection+0x19c>
 b9a:	88 0f       	add	r24, r24
 b9c:	99 1f       	adc	r25, r25
 b9e:	0a 94       	dec	r0
 ba0:	e2 f7       	brpl	.-8      	; 0xb9a <mdio_setbindirection+0x198>
 ba2:	84 2b       	or	r24, r20
 ba4:	8c 93       	st	X, r24
 ba6:	17 c0       	rjmp	.+46     	; 0xbd6 <mdio_setbindirection+0x1d4>
 			else if (copy_u8bindir==BIN_INPUT){CLR_BIT(DDRD,copy_u8binnumber);}
 ba8:	8b 81       	ldd	r24, Y+3	; 0x03
 baa:	88 23       	and	r24, r24
 bac:	a1 f4       	brne	.+40     	; 0xbd6 <mdio_setbindirection+0x1d4>
 bae:	a1 e3       	ldi	r26, 0x31	; 49
 bb0:	b0 e0       	ldi	r27, 0x00	; 0
 bb2:	e1 e3       	ldi	r30, 0x31	; 49
 bb4:	f0 e0       	ldi	r31, 0x00	; 0
 bb6:	80 81       	ld	r24, Z
 bb8:	48 2f       	mov	r20, r24
 bba:	89 81       	ldd	r24, Y+1	; 0x01
 bbc:	28 2f       	mov	r18, r24
 bbe:	30 e0       	ldi	r19, 0x00	; 0
 bc0:	81 e0       	ldi	r24, 0x01	; 1
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	02 2e       	mov	r0, r18
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <mdio_setbindirection+0x1ca>
 bc8:	88 0f       	add	r24, r24
 bca:	99 1f       	adc	r25, r25
 bcc:	0a 94       	dec	r0
 bce:	e2 f7       	brpl	.-8      	; 0xbc8 <mdio_setbindirection+0x1c6>
 bd0:	80 95       	com	r24
 bd2:	84 23       	and	r24, r20
 bd4:	8c 93       	st	X, r24


 }

 	if (1 ){
 				return ok;
 bd6:	80 e0       	ldi	r24, 0x00	; 0
 			}
 			else {
 				return error;
 			}
 }
 bd8:	0f 90       	pop	r0
 bda:	0f 90       	pop	r0
 bdc:	0f 90       	pop	r0
 bde:	0f 90       	pop	r0
 be0:	0f 90       	pop	r0
 be2:	cf 91       	pop	r28
 be4:	df 91       	pop	r29
 be6:	08 95       	ret

00000be8 <MEXIT_callback>:
#include"../MEXTI/MEXTI_reg.h"

#define sense_control_state  MEXTI_FALLING_EDGE
void (*Gptr)(void)=NULL;

void MEXIT_callback(void(loc_Ptrtofun)(void)){
 be8:	df 93       	push	r29
 bea:	cf 93       	push	r28
 bec:	00 d0       	rcall	.+0      	; 0xbee <MEXIT_callback+0x6>
 bee:	cd b7       	in	r28, 0x3d	; 61
 bf0:	de b7       	in	r29, 0x3e	; 62
 bf2:	9a 83       	std	Y+2, r25	; 0x02
 bf4:	89 83       	std	Y+1, r24	; 0x01
	if(loc_Ptrtofun!=NULL){
 bf6:	89 81       	ldd	r24, Y+1	; 0x01
 bf8:	9a 81       	ldd	r25, Y+2	; 0x02
 bfa:	00 97       	sbiw	r24, 0x00	; 0
 bfc:	31 f0       	breq	.+12     	; 0xc0a <MEXIT_callback+0x22>
		Gptr=loc_Ptrtofun;
 bfe:	89 81       	ldd	r24, Y+1	; 0x01
 c00:	9a 81       	ldd	r25, Y+2	; 0x02
 c02:	90 93 62 00 	sts	0x0062, r25
 c06:	80 93 61 00 	sts	0x0061, r24
	}

}
 c0a:	0f 90       	pop	r0
 c0c:	0f 90       	pop	r0
 c0e:	cf 91       	pop	r28
 c10:	df 91       	pop	r29
 c12:	08 95       	ret

00000c14 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void){
 c14:	1f 92       	push	r1
 c16:	0f 92       	push	r0
 c18:	0f b6       	in	r0, 0x3f	; 63
 c1a:	0f 92       	push	r0
 c1c:	11 24       	eor	r1, r1
 c1e:	2f 93       	push	r18
 c20:	3f 93       	push	r19
 c22:	4f 93       	push	r20
 c24:	5f 93       	push	r21
 c26:	6f 93       	push	r22
 c28:	7f 93       	push	r23
 c2a:	8f 93       	push	r24
 c2c:	9f 93       	push	r25
 c2e:	af 93       	push	r26
 c30:	bf 93       	push	r27
 c32:	ef 93       	push	r30
 c34:	ff 93       	push	r31
 c36:	df 93       	push	r29
 c38:	cf 93       	push	r28
 c3a:	cd b7       	in	r28, 0x3d	; 61
 c3c:	de b7       	in	r29, 0x3e	; 62
	if(Gptr!=NULL){
 c3e:	80 91 61 00 	lds	r24, 0x0061
 c42:	90 91 62 00 	lds	r25, 0x0062
 c46:	00 97       	sbiw	r24, 0x00	; 0
 c48:	29 f0       	breq	.+10     	; 0xc54 <__vector_1+0x40>


		Gptr();
 c4a:	e0 91 61 00 	lds	r30, 0x0061
 c4e:	f0 91 62 00 	lds	r31, 0x0062
 c52:	09 95       	icall
}
}
 c54:	cf 91       	pop	r28
 c56:	df 91       	pop	r29
 c58:	ff 91       	pop	r31
 c5a:	ef 91       	pop	r30
 c5c:	bf 91       	pop	r27
 c5e:	af 91       	pop	r26
 c60:	9f 91       	pop	r25
 c62:	8f 91       	pop	r24
 c64:	7f 91       	pop	r23
 c66:	6f 91       	pop	r22
 c68:	5f 91       	pop	r21
 c6a:	4f 91       	pop	r20
 c6c:	3f 91       	pop	r19
 c6e:	2f 91       	pop	r18
 c70:	0f 90       	pop	r0
 c72:	0f be       	out	0x3f, r0	; 63
 c74:	0f 90       	pop	r0
 c76:	1f 90       	pop	r1
 c78:	18 95       	reti

00000c7a <MGIE_enable>:
void MGIE_enable(void){
 c7a:	df 93       	push	r29
 c7c:	cf 93       	push	r28
 c7e:	cd b7       	in	r28, 0x3d	; 61
 c80:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG,7 );
 c82:	af e5       	ldi	r26, 0x5F	; 95
 c84:	b0 e0       	ldi	r27, 0x00	; 0
 c86:	ef e5       	ldi	r30, 0x5F	; 95
 c88:	f0 e0       	ldi	r31, 0x00	; 0
 c8a:	80 81       	ld	r24, Z
 c8c:	80 68       	ori	r24, 0x80	; 128
 c8e:	8c 93       	st	X, r24



}
 c90:	cf 91       	pop	r28
 c92:	df 91       	pop	r29
 c94:	08 95       	ret

00000c96 <MEXTI0_init>:

void MEXTI0_init(){
 c96:	df 93       	push	r29
 c98:	cf 93       	push	r28
 c9a:	cd b7       	in	r28, 0x3d	; 61
 c9c:	de b7       	in	r29, 0x3e	; 62
 if (	sense_control_state == MEXTI_FALLING_EDGE)
	{	SET_BIT(MCUCR,0);
 c9e:	a5 e5       	ldi	r26, 0x55	; 85
 ca0:	b0 e0       	ldi	r27, 0x00	; 0
 ca2:	e5 e5       	ldi	r30, 0x55	; 85
 ca4:	f0 e0       	ldi	r31, 0x00	; 0
 ca6:	80 81       	ld	r24, Z
 ca8:	81 60       	ori	r24, 0x01	; 1
 caa:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);}
 cac:	a5 e5       	ldi	r26, 0x55	; 85
 cae:	b0 e0       	ldi	r27, 0x00	; 0
 cb0:	e5 e5       	ldi	r30, 0x55	; 85
 cb2:	f0 e0       	ldi	r31, 0x00	; 0
 cb4:	80 81       	ld	r24, Z
 cb6:	82 60       	ori	r24, 0x02	; 2
 cb8:	8c 93       	st	X, r24
		SET_BIT(MCUCR,0);
		CLR_BIT(MCUCR,1);}
	else if (	sense_control_state == MEXTI_RISING_EDGE)
	{	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);}
 SET_BIT(GICR,6);
 cba:	ab e5       	ldi	r26, 0x5B	; 91
 cbc:	b0 e0       	ldi	r27, 0x00	; 0
 cbe:	eb e5       	ldi	r30, 0x5B	; 91
 cc0:	f0 e0       	ldi	r31, 0x00	; 0
 cc2:	80 81       	ld	r24, Z
 cc4:	80 64       	ori	r24, 0x40	; 64
 cc6:	8c 93       	st	X, r24
}
 cc8:	cf 91       	pop	r28
 cca:	df 91       	pop	r29
 ccc:	08 95       	ret

00000cce <led_init>:
 *
 *  Created on: Nov 12, 2022
 *      Author: engineer
 */
#include "led.h"
u8 led_init(u8 bin_no,u8 port_no ,u8 dir ){
 cce:	df 93       	push	r29
 cd0:	cf 93       	push	r28
 cd2:	00 d0       	rcall	.+0      	; 0xcd4 <led_init+0x6>
 cd4:	0f 92       	push	r0
 cd6:	cd b7       	in	r28, 0x3d	; 61
 cd8:	de b7       	in	r29, 0x3e	; 62
 cda:	89 83       	std	Y+1, r24	; 0x01
 cdc:	6a 83       	std	Y+2, r22	; 0x02
 cde:	4b 83       	std	Y+3, r20	; 0x03

	mdio_setbindirection (bin_no, port_no, dir );
 ce0:	89 81       	ldd	r24, Y+1	; 0x01
 ce2:	6a 81       	ldd	r22, Y+2	; 0x02
 ce4:	4b 81       	ldd	r20, Y+3	; 0x03
 ce6:	0e 94 01 05 	call	0xa02	; 0xa02 <mdio_setbindirection>
	if (1 ){
			return ok;
 cea:	80 e0       	ldi	r24, 0x00	; 0
		}
		else {
			return error;
		}

}
 cec:	0f 90       	pop	r0
 cee:	0f 90       	pop	r0
 cf0:	0f 90       	pop	r0
 cf2:	cf 91       	pop	r28
 cf4:	df 91       	pop	r29
 cf6:	08 95       	ret

00000cf8 <led_toggle>:
u8 led_toggle (u8 bin_no,u8 port_no){
 cf8:	df 93       	push	r29
 cfa:	cf 93       	push	r28
 cfc:	00 d0       	rcall	.+0      	; 0xcfe <led_toggle+0x6>
 cfe:	cd b7       	in	r28, 0x3d	; 61
 d00:	de b7       	in	r29, 0x3e	; 62
 d02:	89 83       	std	Y+1, r24	; 0x01
 d04:	6a 83       	std	Y+2, r22	; 0x02

	mdio_togglepin (bin_no, port_no  );
 d06:	89 81       	ldd	r24, Y+1	; 0x01
 d08:	6a 81       	ldd	r22, Y+2	; 0x02
 d0a:	0e 94 83 04 	call	0x906	; 0x906 <mdio_togglepin>
	if (1 ){
			return ok;
 d0e:	80 e0       	ldi	r24, 0x00	; 0
		}
		else {
			return error;
		}
}
 d10:	0f 90       	pop	r0
 d12:	0f 90       	pop	r0
 d14:	cf 91       	pop	r28
 d16:	df 91       	pop	r29
 d18:	08 95       	ret

00000d1a <set_led_value>:
u8 set_led_value(u8 bin_no,u8 port_no ,u8 dir ){
 d1a:	df 93       	push	r29
 d1c:	cf 93       	push	r28
 d1e:	00 d0       	rcall	.+0      	; 0xd20 <set_led_value+0x6>
 d20:	0f 92       	push	r0
 d22:	cd b7       	in	r28, 0x3d	; 61
 d24:	de b7       	in	r29, 0x3e	; 62
 d26:	89 83       	std	Y+1, r24	; 0x01
 d28:	6a 83       	std	Y+2, r22	; 0x02
 d2a:	4b 83       	std	Y+3, r20	; 0x03

	mdio_setbinvalue (bin_no, port_no, dir );
 d2c:	89 81       	ldd	r24, Y+1	; 0x01
 d2e:	6a 81       	ldd	r22, Y+2	; 0x02
 d30:	4b 81       	ldd	r20, Y+3	; 0x03
 d32:	0e 94 1a 03 	call	0x634	; 0x634 <mdio_setbinvalue>
	if (1 ){
			return ok;
 d36:	80 e0       	ldi	r24, 0x00	; 0
		}
		else {
			return error;
		}
}
 d38:	0f 90       	pop	r0
 d3a:	0f 90       	pop	r0
 d3c:	0f 90       	pop	r0
 d3e:	cf 91       	pop	r28
 d40:	df 91       	pop	r29
 d42:	08 95       	ret

00000d44 <get_led_value>:
u8 get_led_value (u8 bin_no,u8 port_no, u8 *led_reading ){
 d44:	df 93       	push	r29
 d46:	cf 93       	push	r28
 d48:	00 d0       	rcall	.+0      	; 0xd4a <get_led_value+0x6>
 d4a:	00 d0       	rcall	.+0      	; 0xd4c <get_led_value+0x8>
 d4c:	cd b7       	in	r28, 0x3d	; 61
 d4e:	de b7       	in	r29, 0x3e	; 62
 d50:	89 83       	std	Y+1, r24	; 0x01
 d52:	6a 83       	std	Y+2, r22	; 0x02
 d54:	5c 83       	std	Y+4, r21	; 0x04
 d56:	4b 83       	std	Y+3, r20	; 0x03
	mdio_Readbin (bin_no,port_no, led_reading );
 d58:	2b 81       	ldd	r18, Y+3	; 0x03
 d5a:	3c 81       	ldd	r19, Y+4	; 0x04
 d5c:	89 81       	ldd	r24, Y+1	; 0x01
 d5e:	6a 81       	ldd	r22, Y+2	; 0x02
 d60:	a9 01       	movw	r20, r18
 d62:	0e 94 fe 03 	call	0x7fc	; 0x7fc <mdio_Readbin>
	if (1 ){
			return ok;
 d66:	80 e0       	ldi	r24, 0x00	; 0
		else {
			return error;
		}


}
 d68:	0f 90       	pop	r0
 d6a:	0f 90       	pop	r0
 d6c:	0f 90       	pop	r0
 d6e:	0f 90       	pop	r0
 d70:	cf 91       	pop	r28
 d72:	df 91       	pop	r29
 d74:	08 95       	ret

00000d76 <buttom_init_dir>:
 *  Created on: Nov 14, 2022
 *      Author: engineer
 */
#include "buttom.h"

u8 buttom_init_dir(u8 PIN, u8 PORT,  u8 dir){
 d76:	df 93       	push	r29
 d78:	cf 93       	push	r28
 d7a:	00 d0       	rcall	.+0      	; 0xd7c <buttom_init_dir+0x6>
 d7c:	0f 92       	push	r0
 d7e:	cd b7       	in	r28, 0x3d	; 61
 d80:	de b7       	in	r29, 0x3e	; 62
 d82:	89 83       	std	Y+1, r24	; 0x01
 d84:	6a 83       	std	Y+2, r22	; 0x02
 d86:	4b 83       	std	Y+3, r20	; 0x03
	mdio_setbindirection ( PIN,  PORT,   dir);
 d88:	89 81       	ldd	r24, Y+1	; 0x01
 d8a:	6a 81       	ldd	r22, Y+2	; 0x02
 d8c:	4b 81       	ldd	r20, Y+3	; 0x03
 d8e:	0e 94 01 05 	call	0xa02	; 0xa02 <mdio_setbindirection>
	if (1 ){
		return ok;
 d92:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		return error;
	}
}
 d94:	0f 90       	pop	r0
 d96:	0f 90       	pop	r0
 d98:	0f 90       	pop	r0
 d9a:	cf 91       	pop	r28
 d9c:	df 91       	pop	r29
 d9e:	08 95       	ret

00000da0 <activate_pull_up>:

u8 activate_pull_up ( u8 PIN, u8 PORT, u8 BIN_val){
 da0:	df 93       	push	r29
 da2:	cf 93       	push	r28
 da4:	00 d0       	rcall	.+0      	; 0xda6 <activate_pull_up+0x6>
 da6:	0f 92       	push	r0
 da8:	cd b7       	in	r28, 0x3d	; 61
 daa:	de b7       	in	r29, 0x3e	; 62
 dac:	89 83       	std	Y+1, r24	; 0x01
 dae:	6a 83       	std	Y+2, r22	; 0x02
 db0:	4b 83       	std	Y+3, r20	; 0x03
	mdio_setbinvalue (PIN, PORT, BIN_val);
 db2:	89 81       	ldd	r24, Y+1	; 0x01
 db4:	6a 81       	ldd	r22, Y+2	; 0x02
 db6:	4b 81       	ldd	r20, Y+3	; 0x03
 db8:	0e 94 1a 03 	call	0x634	; 0x634 <mdio_setbinvalue>
	if (1 ){
		return ok;
 dbc:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		return error;

}
}
 dbe:	0f 90       	pop	r0
 dc0:	0f 90       	pop	r0
 dc2:	0f 90       	pop	r0
 dc4:	cf 91       	pop	r28
 dc6:	df 91       	pop	r29
 dc8:	08 95       	ret

00000dca <main>:
 * MEXTI0_init();
 *  MEXIT_callback(led_togglell);
 *
 */

int main(void){
 dca:	df 93       	push	r29
 dcc:	cf 93       	push	r28
 dce:	cd b7       	in	r28, 0x3d	; 61
 dd0:	de b7       	in	r29, 0x3e	; 62

	 app_init();
 dd2:	0e 94 39 02 	call	0x472	; 0x472 <app_init>



	return 0;
 dd6:	80 e0       	ldi	r24, 0x00	; 0
 dd8:	90 e0       	ldi	r25, 0x00	; 0
}
 dda:	cf 91       	pop	r28
 ddc:	df 91       	pop	r29
 dde:	08 95       	ret

00000de0 <_exit>:
 de0:	f8 94       	cli

00000de2 <__stop_program>:
 de2:	ff cf       	rjmp	.-2      	; 0xde2 <__stop_program>
